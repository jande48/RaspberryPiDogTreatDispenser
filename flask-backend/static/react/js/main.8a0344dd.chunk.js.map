{"version":3,"sources":["tedi.jpeg","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","treatStatus","setTreatStatus","pickle","setPickle","Date","timeUser","setTimeUser","treatFrequency","setTreatFrequency","useEffect","axios","get","then","res","data","catch","err","console","log","setNewPickle","newPickleAPI","post","handleRemoveTime","e","key","newPickle","splice","className","Image","src","tedi","size","circular","Divider","hidden","Button","loading","content","onClick","id","Header","as","inverted","textAlign","Grid","verticalAlign","relaxed","Column","width","color","onChange","value","Dropdown","inline","placeholder","options","text","today","push","parseInt","getFullYear","getMonth","getDate","length","map","itm","i","time","freq","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.8a0344dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"media/tedi.42565929.jpeg\";","export default __webpack_public_path__ + \"media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport tedi from './tedi.jpeg';\nimport { Button, Image, Header, Divider, Grid, Dropdown } from 'semantic-ui-react';\nimport './App.css';\nimport axios from 'axios';\nimport {useState,useEffect} from 'react';\nimport TimePicker from 'react-time-picker';\n// import DateFnsUtils from '@date-io/date-fns'; // choose your lib\n// import {\n//   DatePicker,\n//   TimePicker,\n//   DateTimePicker,\n//   MuiPickersUtilsProvider,\n// } from '@material-ui/pickers';\nfunction App() {\n  const [treatStatus, setTreatStatus] = useState(\"waiting\")\n  const [pickle, setPickle] = useState({})\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [timeUser, setTimeUser] = useState('10:00');\n  const [treatFrequency, setTreatFrequency] = useState('Today')\n  useEffect(() => {\n    axios.get('/getPickle').then(\n      res => {\n        setPickle(res.data)\n      }\n    ).catch(err => console.log(err))\n  },[])\n\n  const handleTreatClick = () => {\n    setTreatStatus(\"dispensing\")\n\n    axios.post('/giveTreat',{id: 'success'}).then(\n      res => {\n        if (res.data.key == 'success') {\n          setTreatStatus(\"dispensed\")\n        }else{\n          setTreatStatus(\"problem\")\n        }\n        }\n    ).catch(err => {setTreatStatus(\"problem\")})\n  }\n\n  const setNewPickle = (newPickleAPI) => {\n    axios.post('/setPickle',newPickleAPI).then(\n      res => {\n        setPickle(res.data)\n      }\n    ).catch(err => console.log(err))\n  }\n\n  const handleDecrement = () => {\n    const newPickle = {...pickle}\n    if (newPickle[\"maxNumOfTreatsPerDay\"] > 0){\n      newPickle[\"maxNumOfTreatsPerDay\"] -= 1\n      setNewPickle(newPickle)\n    }\n    \n    \n  }\n  const handleIncrement = () => {\n    const newPickle = {...pickle}\n\n    newPickle[\"maxNumOfTreatsPerDay\"] += 1\n    setNewPickle(newPickle)\n    \n  }\n  const handleScheduleAdd = () => {\n    const newPickle = {...pickle}\n    const today = new Date()\n    newPickle['scheduledDispenseTreats'].push({'time':timeUser,'freq':treatFrequency,'scheduledDate':[parseInt(today.getFullYear()),parseInt(today.getMonth()+1),parseInt(today.getDate())]})\n    setNewPickle(newPickle)\n  }\n  const handleTreatFreqChange = (e, { value}) => setTreatFrequency(value)\n  const handleRemoveTime = (e, {key}) => {\n    const newPickle = {...pickle}\n    newPickle['scheduledDispenseTreats'].splice(key,1)\n    setNewPickle(newPickle)\n  }\n  \n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        <Image src={tedi} size='medium' circular/>\n        <Divider hidden/>\n        { treatStatus=='dispensing' ?\n          <Button \n            loading\n            content=\"Give Tedi a Treat!\"\n          />\n        :\n          <Button \n            content=\"Give Tedi a Treat!\"\n            onClick={handleTreatClick}\n          />\n        }\n        { treatStatus=='dispensed' ?\n          <Header as=\"h2\" inverted>She Got a Treat!</Header>\n        :\n          ''\n        }\n        { treatStatus=='problem' ?\n          <Header as=\"h2\" inverted>hmmm. There was a problem.</Header>\n        :\n          ''\n        }\n        <Divider/>\n        <Header as='h1' textAlign='center' inverted>Max Treats Per Day</Header>\n        <Grid verticalAlign='middle'>\n        \n        <Header as='h1' textAlign='center' inverted>\n          <Button content=\"-\" onClick={handleDecrement}/>\n          {\"  \"+pickle[\"maxNumOfTreatsPerDay\"]+\"     \"}\n          <Button content=\"+\" onClick={handleIncrement}/>\n        </Header>\n        </Grid>\n        <Divider hidden/>\n        <Header as='h1' textAlign='center' inverted>Schedule a Treat</Header>\n        <Grid relaxed>\n            <Grid.Column width={25} color={'grey'} key={'grey'}>\n              {/* <Header>               */}\n              <TimePicker\n                onChange={setTimeUser}\n                value={timeUser}\n                inverted\n              />\n              <Dropdown\n                    inline\n                    placeholder='Today'\n                    //value={treatFrequency}\n                    onChange={handleTreatFreqChange}\n                    options={[{key:'Today',text:'Today',value:\"Today\"},{key:'Tomorrow',text:'Tomorrow',value:\"Tomorrow\"},{key:'Everyday',text:'Everyday',value:\"Everyday\"}]}\n                  />\n              {/* </Header> */}\n              <Button content=\"Add\" onClick={handleScheduleAdd}/>\n            </Grid.Column>\n            {/* <Grid.Column width={5} color={'grey'} key={'grey'}>\n\n            </Grid.Column> */}\n        </Grid>\n        <Divider hidden/>\n        <Header as='h1' textAlign='center' inverted>Scheduled Treats</Header>\n        {typeof(pickle['scheduledDispenseTreats']) !== 'undefined' ? pickle['scheduledDispenseTreats'].length > 0 ?\n        pickle['scheduledDispenseTreats'].map((itm, i) => (\n          \n          <Header as='h2' inverted>\n            {itm.time} {itm.freq}\n            <Button content=\"Remove\" key={i} onClick={handleRemoveTime}/>\n          </Header>\n        ))\n      :'':''}\n        <Divider hidden/>\n        </header>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}